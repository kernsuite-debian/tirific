/**
   @file maindocu.h
   This file contains the main documentation: it's not a real .h file
   
   The long documentation about the program is contained in this
   file. It gets the suffix .h to initialise the c generator of emacs.

   $Source: /Volumes/DATA_J_II/data/CVS/tirific/rawdocu/maindocu.h,v $
   $Date: 2009/05/26 07:56:41 $
   $Revision: 1.3 $
   $Author: jozsa $
   $Log: maindocu.h,v $
   Revision 1.3  2009/05/26 07:56:41  jozsa
   Left work

   Revision 1.2  2007/08/22 15:58:48  gjozsa
   Left work

   Revision 1.1.1.1  2004/10/29 11:13:32  gjozsa
   Added to CVS control

   Revision 1.1.1.1  2004/10/28 14:47:31  gjozsa
   Added to CVS control

*/

/**
   @mainpage TIlted-ring FItting Code
   @brief A program and library for the purpose of tilted-ring fitting to datacubes
    
   $Source: /Volumes/DATA_J_II/data/CVS/tirific/rawdocu/maindocu.h,v $
   $Date: 2009/05/26 07:56:41 $
   $Revision: 1.3 $
   $Author: jozsa $

   This is now the start of the source code documentation. I'll leave the stuff from the template documentation until I decide to delete it.

   @section intro_sec Sections on the mainpage
      A section is made by \c \@section \c name \c title

      @subsection some_subsection Subsections
         A subsection is made by \c \@subsection \c name \c title
   
         @subsubsection some_subsubsection Subsubsections
            A subsubsection is made by \c \@subsubsection \c name \c title
   
            @par some paragraph
               A paragraph is made by \c \@par paragraph
   
   @todo 
   A todo list is generated by adding \c \@todo
   
   @section general general topics
   
      @subsection generating generating lists and special typewriting
         A list like in the first paragraph is made by:
   
         \c \@li \c text1 \n
         \c \@li \c text2 ...
   
         If one wants to break the text do it by \\n
   
         An \@ is made by \c \\\@
   
         Some different type is produced by putting a \c \\c in front of
         each word that you want to highlight.
   
         If one wants to add a piece of code make like

    @code
            a * piece * of code
            /* here you can do what you think is right */
            @endcode

         bracket it in \c \@code and \c \@endcode
   
         Finally, to add to the index type \@addindex.
     
   @addindex
      This is added to the index
     
   @section setup and general rules
  
      @subsection setup setup
         The setup file has to be changed:

         @li PROJECT_NAME           = has to be set
         @li PROJECT_NUMBER         = has to be set
         @li SOURCE_BROWSER         = YES to add all found sources in the                                                generated file
         @li ALPHABETICAL_INDEX     = YES to make an index of the structures
         @li STRIP_CODE_COMMENTS    = NO to make a doxygen comment visible                                              when listing functions
         @li FILE_PATTERNS          = *.chap1 to add this description for                                                    the first chapter.

      @subsection rules common rules
         A documentation block recognised by doxygen looks like:

            @code
           /**
              @file mainprog.h
              @brief brief documentation about the document
              
              The long documentation about the file follows here. It
              is maybe not a bad idea to include the information from
              the revision manager here. We use the $'s to do that.

           */
        @endcode

        Three things are to be recognised:

        @li the \\** at the start of the documentation block and the *\\ at the            end
        @li somewhere in the documentation of a file a file has to be declared             to be public by \c \@file \c filename
        @li for every item in the docu block there is the \c \@brief prefix for            the biref docu and followed by a blank line a large docu. 

        Items discussed here will be:
           @li files
           @li variables
           @li functions
           @li typedefs
           @li structures
           @li macros

   @section documentation documentation of items

      @subsection files files

         All source code should be included in the documentation. We will               document also private functions and private global variables as                the documentation is for develepment reasons.

         The head of each source file (.h or .c) is like
            @code
               /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
               /**
                  @file mainprog.h
                  @brief brief documentation about the document
                  
                  The long documentation about the file follows
                  here. It is maybe not a bad idea to include the
                  information from the revision manager here. We use
                  the $'s to do that.

                  $Source: /Volumes/DATA_J_II/data/CVS/tirific/rawdocu/maindocu.h,v $
                  $Date: 2009/05/26 07:56:41 $
                  $Revision: 1.3 $
                  $Author: jozsa $

                  \n works extremely well as the keywords are
                  recognized by doxygen aswell
   */
   /* ------------------------------------------------------------ */
        @endcode

        As said the header block of the files should contain information
        changed by the revision manager. For some reason not given in the  
        doxygen manual this information is highlighted as if given directly
        as in the main page.

      @subsection variables variables
         All global variables should be documented like:

            @code
               /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
               /**
                  @var variable
                  @brief a brief description of the variable
                  
                  If necessary, a long one
               */
               /* ------------------------------------------------------------ */
               int variable;
            @endcode
	    However, such a thing should never happen in the public domain. We             document on and define global variables in the .c files. 

      @subsection functions functions
         All functions should be documented like:

            @code
               /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
               /** 
                   @fn float returnsquare(float number)
                   @brief a brief description of the function
                   
                   @param number (float) a brief description of the
                   parameter. I'll stick to give again the type in
                   brackets in front
                   
                   @return (success) some words about the return value
                   for a success\n

                   (error) some words what the function does when it
                   fails to do the desired thing\n If there is no
                   error management, it should be told expressively.

                   \nSome long documentation at the end
               */
               /* ------------------------------------------------------------ */
               float returnsquare(float number);
            @endcode
         Not much more to say.

      @subsection typedefs typedefs
         A typedef documentation looks like:
            @code
               /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
               /**
                  @typedef typedef int newtype
                  @brief Brief description of the new type
                  
                  Long description of the new type
               */
               /* ------------------------------------------------------------ */
               typedef int newtype;
            @endcode

         Typedefs of Strucures are not documented if not changing the                   name of the structure. By default a structure is aliased by                    a typedef to the name of the structure itself (see Structures).

      @subsection structures structures
         A definition of a structure goes as follows:

            @code
               /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
               /**
                  @struct somestruct
                  @brief A brief description of the struct
                  
                  \li \c int \c number1 bla
                  \li \c int \c number2 blub
                  
                  A long description of the struct. The list of short
                  descriptions is used to make the source file to some
                  extent readable, alas, I haven't found a solution
                  for that.
               */
               /* ------------------------------------------------------------ */
               typedef struct somestruct
               { 
                 /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */
                 /**
                    @brief a brief description of first member of the struct

                    A long description of the first member of the
                    struct if desirable

                 */
                 int number1;
                 /**
                    @brief a brief description of second member of the struct
                    
                    A long description of the second member of the
                    struct if desirable

                 */
                 int number2;
              } somestruct;
          @endcode

          Not very nice, but the advantages are greater than 
          the disadvantages. The typedef is never documented 
          and only an aliasing of struct name with name.

       @subsection defines defines
          This is an example to document defines:

             @code
                /* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ */             
                /**
                   @def ADEFINE(a)
                   @brief It simply doubles the number

                   This define doubles the number
                */
                /* ------------------------------------------------------------ */
                #define ADEFINE(a) aa
             @endcode

          This is it.

   @section cvs cvs
	    cvs is the code revision system in use. First a short description for the setup, then the common day use, finally rescuing files. In this description the setup of the documentation to include information by cvs is already done.

      @subsection setupcvs setup of cvs and start of a project
	 The first thing is to create a repository in to. This is done by:\n
	 @c $: @c cvs @c -d @c /aibn191_1/gjozsa/CVS @c init\n
         in our case. This has already been done. A backup of the repository
         is done by copying it.

	 Next, a new project file is to be made.
         @$: @c cd @c wdir \n
	 @$: @c cvs @c import @c -m @c "Imported sources" @c newrepositorybranch @c raiub @c start 

	 This will import recursively all non-binary files into a repository defined by the environment variable CVSROOT and create the file newrepositorybranch in the repository. After that the source files should be deleted because changes in just imported files won't be submitted. Make a working copy after import by @c checkout (s.b.) like that:

 @c @$: @c cd .. \n
@c @$: @c cvs @c @c checkout @c @c newrepositorybranch \n
@c @$: @c diff @c -r @c wdir @c @c newrepositorybranch \n
@c @$: @c rm @c -r @c wdir

And go on with the normal creation of a working file. The inner two commands make sure that the import worked out fine. Binaries should be added singularly into the repository (see adding removing)

@subsection binaries adding and removing files
@par adding
@c @$: @c cvs @c add @c @c filename for text files \n
@c @$: @c cvs @c add @c -kb @c filename for binaries \n
@c @$: @c cvs @c @c commit @c filename \n
@c @$: @par removing
@c @$: @c cvs @c remove @c filename \n
@c @$: @c cvs @c commit @c filename

@subsection work everyday's work
@par working copy
To get a working copy of a project do:

@c @$: @c cvs @c checkout @c directory

Work in the directory

@par committing committing changes
If you want to commit changes of a file you worked on do:

@c @$: @c cvs @c commit @c file

Please do it if it compiles correctly only.

@par cleaning  cleaning up
If you want to delete the working copy for some reasons do

@c @$: @c cd ..
@c @$: @c cvs @c release @c -d @c working_copy

@par Leaving work
  Leaving work you can check whether you have forgotten to commit changes by:
@c @$: @c cd ..
@c @$: @c cvs @c release @c  @c working_copy

@subsection tweak tweaking in the configuration
You could add aliases in CVSROOT/modules by

@c @$: cvs checkout CVSROOT \n
@c @$: cd CVSROOT \n
@c @$: xemacs modules \n
@c @$: cvs commit modules \n
@c @$: cd .. \n
@c @$: cvs release -d CVSROOT \n

You can add 

@c ####### \n
@c # CVS # \n
@c ####### \n
@c setenv @c CVSROOT @c /aibn191_1/gjozsa/CVS \n
@c setenv @c CVSEDITOR @c xemacs \n

or similar in your local .rc file.

@subsection subsection destroying things
You want to get rid of a whole project? Fed up with it? Then you do it with 

@c @$: @c cd @c $CVSROOT \n
@c @$: @c rm @c -rf @c project

This seems to work...
*/
